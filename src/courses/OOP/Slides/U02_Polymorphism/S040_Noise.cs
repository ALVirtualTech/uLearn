using uLearn;

namespace OOP.Slides.U02_Polymorphism
{
	[Slide("Задача: Шумы", "61E9B988-1D25-4E17-B949-9127BDAFBB7B")]
	public class S040_Noise
	{
		/*
		Это обязательная задача.
	
		Пора стать ближе к реальности!
		А в реальности двигатели работают с погрешностью, колеса проскальзывают, аккумуляторы садятся и еще много чего идет не так!
		Не исключено, что в таких условиях придуманные вами алгоритмы работают плохо. Давайте это проверим!
		
		В этой задаче вам предлагается доработать систему симуляции робота так, чтобы можно было задавать различного рода искажения, свойственные для реального мира.

		### Модель искажений
		
		При симуляции время разбивается на интервалы размером dt.
		На каждом промежутке реальные линейная и угловая скорости робота вычисляются по формулам:
		*/

		/*tex

		V_{real} = V_{command} + noise_V(V_{command})
		\omega_{real} = \omega_{command} + noise_{\omega}(\omega_{command})

		*/

		/*

		<span class="tex">noise_V, noise_{\omega}</span> — это две функции, моделирующие искажения в линейной и угловой скоростях, 
		а скорости с индексом command — значения из команды роботу.

		## Задача

		1. Создайте интерфейс `INoise`, описывающий модель шума (то есть функцию <span class="tex">noise</span>). 
			Что должно входить в этот интерфейс придумайте самостоятельно.

		2. Создайте класс `UniformNoise`, реализующий `INoise` согласно следующей формуле:

			<div class="tex">noise(x) = x \cdot rnd(-w, w)</div>

			где <span class="tex">rnd(min, max)</span> — генератор случайных действительных чисел в диапазоне от min до max, а <span class="tex">w</span> — параметр, передаваемый в конструктор `UniformNoise`
		
		3. Создайте класс `NullNoise`, не добавляющий шума к значению.

		4. Встройте шумы в код моделирования движения робота. Учитывайте, что шумы должны добавляться _на каждом_ промежутке времени dt.
		Так если продолжительность очередной команды велика, шумы должны быть учтены многократно. 
		Хорошо подумайте куда лучше поместить код моделирования движения.

		5. Проверьте, что с `NullNoise` результаты измерения эффективности навигаторов не изменились.
		
		6. Придумайте еще какой-нибудь вид шума и создайте для него реализацию `INoise`.

		7. Добавьте еще четыре столбца в таблицу финального отчета: 
			
			* SimpleNavigator + UniformNoise(w=0.1)
			* SmartNavigator + UniformNoise(w=0.1)
			* SimpleNavigator + YourNoise(w=0.1) — для вашего шума.
			* SmartNavigator + YourNoise(w=0.1) — для вашего шума.

		*/
	}
}