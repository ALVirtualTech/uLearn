using uLearn;

namespace OOP.Slides.U03_DataStructure
{
    [Slide("Куча", "{CCF928FA-419F-48C7-BB73-D0D5402BAB1C}")]
    public class S030_Heap
    {
        /*
        Куча - это абстрактный тип данных, которая удовлетворяет следующему свойству: 
        если B является потомком узла A, то ключ(A) ≥ ключ(B). Из этого следует, что элемент 
        с наибольшим ключом всегда является корневым узлом кучи, поэтому иногда такие кучи называют 
        max-кучами (в качестве альтернативы, если сравнение перевернуть, то наименьший элемент будет всегда корневым узлом,
        такие кучи называют min-кучами). Не существует никаких ограничений относительно того, сколько узлов-потомков имеет каждый узел кучи,
        хотя на практике их число обычно не более двух. 
        
        Куча является максимально эффективной реализацией абстрактного типа данных, который называется очередью
        с приоритетом.
        
        Как правило, куча поддерживает следующие операции:
        * FindMin/FindMax - операция нахождения минимума/максимума
        * DeleteMin/DeleteMax - операция удаляние минимума/максимума
        * Add(element) - операция добавления элемента в кучу
        * Merge - соединение двух куч в новую кучу, содержащую все элементы обеих исходных.
        
        ### Реализация
        Стоит отметить: кучи обычно реализуются с помощью массивов, что исключает наличие указателей между её элементами,
        что позволяет уменьшить количество потребляемой памяти.
        
        Приведем наиболее известные реализации кучи:
        * Бинарная куча
        * Биномиальная куча
        * Фибоначчиева куча
        
        Подробнее про ассимптотическую сложность и реализации можно прочитать на вики(https://en.wikipedia.org/wiki/Heap_(data_structure).
        */


    }
}