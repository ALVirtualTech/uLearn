using uLearn;

namespace OOP.Slides.U03_DataStructure
{
	[Slide("Куча", "{CCF928FA-419F-48C7-BB73-D0D5402BAB1C}")]
	public class S030_Heap
	{
		/*
		Куча — это бинарное дерево поиска, которое удовлетворяет следующему свойству: 
		если B является потомком узла A, то ключ(A) ≥ ключ(B).
		
		Из этого следует, что элемент с наибольшим ключом всегда является корневым узлом кучи, поэтому иногда такие кучи называют 
		max-кучами. Если сравнение обратить, то корневым элементом всегда будет наименьший элемент,
		такие кучи называют min-кучами.

		Куча является эффективной реализацией абстрактного типа данных, который называется очередью
		с приоритетом.

		Как правило, куча поддерживает следующие операции:

		* findMin / findMax — операция нахождения минимума/максимума
		* deleteMin / deleteMax — операция удаления минимума/максимума
		* add(element) — операция добавления элемента в кучу
		* merge — соединение двух куч в новую кучу, содержащую все элементы обеих исходных.

		### Реализация

		Самая простая — бинарная куча — обычно реализуется на массивах: все элементы кучи хранятся в массиве начиная с индекса 1, 
		а индексы потомков узла с индексом $k$ — это $2k$ и $2k+1$. Изображение ниже демонстрирует эту идею.

		![heap](heap.png)

		Есть и более сложные и более эффективные реализации куч, например, биномиальная куча и Фибоначчиева куча.
		Подробнее про асимптотическую сложность и реализации можно прочитать [на вики]("https://en.wikipedia.org/wiki/Heap_(data_structure)").
		*/

	}
}