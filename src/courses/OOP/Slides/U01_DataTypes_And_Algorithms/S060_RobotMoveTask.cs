using uLearn;

namespace OOP.Slides.U01_DataTypes_And_Algorithms
{
	[Slide("Задача 'Движение робота'", "{4EDC2CA1-4A74-4B32-B7C5-F5881911D34A}")]
	public class S060_RobotMoveTask
	{
		/*
		Теперь пора добавить в класс Robot метод Move, с помощью которого можно было бы отдавать команды роботу на движение.
		Метод должен принимать линейную и угловую скорости, а также время, в течении которых нужно выдерживать эти скорости.
		
		Действуя по принципу "делать неизменяемым все, что возможно", нужно сделать класс Robot неизменяемым. 
		Для этого метод Move должен не менять состояние робота, а возвращать новый объект Robot, представляющий состояние робота после выполнения команды.
		
		В итоге можно было бы написать следующую сигнатуру метода:

			Robot Move(double velocity, double angularVelocity, double duration);

		Однако лучше будет завести отдельный класс с тремя полями, представляющий команду роботу:
		*/
		public class RobotCommand
		{
			public double Duration; // продолжительность команды в секундах
			public double Velocity; // линейная скорость
			public double AngularVelocity; // угловая скорость
		}

		/*		

		И использовать следующую сигнатуру Move:

			Robot Move(RobotCommand command);

		Пока вы будете реализовывать метод Move, подумайте, чем сигнатура с RobotCommand, лучше первоначального варианта.
		А на следующем слайде мы это обсудим.

		Итак, реализуйте метод Move.

		Создайте в вашем проекте с тестами отдельный класс для тестов на метод Move.
		Протестируйте корректность вычисления нового состояния робота.
		Не забывайте про граничные случаи: нулевая скорость, нулевая продолжительность, слишком большие по модулю скорости, ...
		*/
	}
}