using uLearn;

namespace OOP.Slides.U01_DataTypes_And_Algorithms
{
	[Slide("Поддержка инвариантов", "{A968B62D-E80D-4AF6-952F-CB0CB10263C7}")]
	public class S030_Consistency
	{
		/*
		Итак класс, как тип данных позволяет собрать в одном предсказуемом месте все вспомогательные методы работы с этим типом.

		Есть и еще одна задача, которую может взять на себя класс тип данных.
		Он может нести ответственность за поддержку внутренней корректности данных — инвариантов, на которые внешние клиенты класса всегда могут полагаться.
		
		Рассмотрим класс, описывающий рациональную дробь.
		*/

		public class Ratio
		{
			///<summary>Числитель сокращенной дроби</summary> 
			public int Numerator { get; private set; }
			///<summary>Знаменатель сокращенной дроби. Всегда положителен.</summary>
			public int Denominator { get; private set; }
		}
		
		/*
		Как видно из комментариев, этот класс взял на себя ответственность за постоянное выполнение следующих двух условий:

		* Дробь несократима.
		* Знаменатель всегда положителен, а знак дроби совпадает со знаком числителя.

		Если полагаться на эти условия, то многие алгоритмы станут проще. Например, проще станет код вывода дроби на экран — там уже не нужно будет сокращать дробь и следить за знаком знаменателя.

		### Вывод
		
		Класс можно использовать для гарантий выполнения каких-нибудь полезных свойств — инвариантов.
		При написании остального кода удобно полагаться на эти инварианты.
		*/
	}
}