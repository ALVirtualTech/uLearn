namespace uLearn.Courses.BasicProgramming.Slides.U08_Recursion
{
	[Slide("Практика", "B8BE9F44E4FE433AA03AFC5CAB9195C5")]
	public class S099_RoutePlanningExercise
	{
		/*
		# Хождение по чекпоинтам

		Роботу нужно проехать через указанные точки, посетив каждую хотя бы один раз.
		Нужно спланировать маршрут так, чтобы суммарный путь был минимален.
		
		[![http://xkcd.com/399/](http://imgs.xkcd.com/comics/travelling_salesman_problem.png)](http://xkcd.com/399/)

		Скачайте проект [route-planning](route-planning.zip).

		## Полный перебор (1-3 балла)

		В файле PathFinder допишите код функции `int[] FindBestCheckpointsOrder(Point[] checkpoints)`.

		Функция принимает массив чекпоинтов. Робот изначально находится в точке `checkpoints[0]`.
		Вернуть нужно порядок посещения чекпоинтов.
		Например, если функция возвращает массив {0,2,1}, это означает, что робот сначала поедет в чекпоинт с индексом 2, а из него в чекпоинт с индексом 1 и на этом закончит свой путь. 

		Действуйте как на лекциях, можете адаптировать код с лекций.

		В задаче заготовлено несколько групп тестов. В первой группе находятся самые легкие тесты. Простейшее решение использующее генерацию всех перестановок сможет с ними справится.

		Для того, чтобы пройти тесты второй и третьей группы вам придется немного оптимизировать ваш код.
		Попробуйте модифицировать код перебора так, чтобы он не делал откровенно лишних действий. 
		Например, прерывал построение очередной перестановки, если стало очевидно, что решение она не улучшит.

		##Приближенное решение задачи (1 балл)

		На практике полным перебором решаются только задачи очень малого размера. Найти кратчайший путь для задачи большого размера за разумное время невозможно.
		Однако большие задачи можно решать приближенно, пытаясь найти как можно более короткий путь за отведенное алгоритму время.

		1. Придумайте, как можно модифицировать алгоритм так, чтобы он прерывал перебор через заданное время.
		
		2. Придумайте как можно модифицировать алгоритм так, чтобы он перебирал сначала наиболее перспективные в каком-то смысле варианты.

			Например, можно пытаться каждый раз идти в ближайшую точку, а потом во все остальные.
		
		Возможно, вы придумаете какие либо еще оптимизации полного перебора.
		*/
	}
}