@using System.Globalization
@using uLearn
@model TocModel

<ul class="side-bar units-list navbar-collapse collapse nav navbar-nav container">
	@if (User.IsInRole(LmsRoles.Admin))
	{
		var currentUrl = Request.Url;
		if (currentUrl != null)
		{
			<li>
				@using (Html.BeginForm("ReloadCourse", "Unit", new { packageName = Model.CourseId + ".zip", returnUrl = currentUrl }, FormMethod.Post))
				{
					<button type="submit" class="btn btn-sm btn-danger">reload course</button>
					<span class="text-muted">← видно только админам</span>
				}
			</li>
		}
	}
	@{
		<li class="units-list-item full-width units-list-item-text course-name"><a data-score="@GetScore(@Model.ScoreForCourse)">@Model.CourseName</a></li>
		int iUnit = 0;
		foreach (var unit in Model.Units)
		{
			var collapseOption = unit == Model.CurrentUnit ? "collapse in" : "collapse";
			<li class="units-list-item full-width">
				<a data-toggle="collapse" href=@("#N" + iUnit) class="units-list-item-text" data-score="@GetScore(Model.ScoresForUnits[unit.UnitName])">@unit.UnitName</a>
				<ul id=@("N" + iUnit) class="slides-list @collapseOption">
					@foreach (var slide in unit.Slides)
					{
						var url = Url.Action("Slide", "Course", new { courseId = Model.CourseId, slideIndex = slide.Index });
						<li class="slide-list-item @(slide == Model.CurrentSlide ? "selected" : "") full-size" onclick="window.location.href = '@url'">
							<i class="@GetIconClass(slide) navbar-label" title="@GetTitle(slide)"></i>
							<a href="@url" style="margin-right: 5px">@slide.Title</a>
							<span class="score right">@GetScore(Model.ScoresForSlides[slide])</span>
						</li>
					}
					@if (User.IsInRole(LmsRoles.Instructor) && unit.InstructorNote != null)
					{
						var url = Url.Action("InstructorNote", "Course", new { courseId = Model.CourseId, unitName = unit.UnitName });
						<li class="slide-list-item slide-list-item-instructor-note" onclick="window.location.href = '@url'">
							<i class="glyphicon glyphicon-eye-close navbar-label-privileged navbar-label" title="Не видно студентам"></i>
							<a href="@url">Заметки преподавателю</a>
						</li>
					}
					@if (User.IsInRole(LmsRoles.Instructor))
					{
						<li class="slide-list-item unit-statistic-ref">
							<i class="glyphicon glyphicon-eye-close navbar-label-privileged navbar-label" title="Не видно студентам"></i>
							@Html.ActionLink("Статистика и успеваемость", "UnitStatistics", "Analytics", new { courseId = Model.CourseId, unitName = unit.UnitName }, null)
						</li>
					}
				</ul>
			</li>
					iUnit++;
		}
		if (Model.NextUnitTime < DateTime.MaxValue)
		{
			<li class="units-list-item"><a id="badge"><div class="label label-info">Следующий модуль — @Model.NextUnitTime.ToString("dd MMMM", CultureInfo.CreateSpecificCulture("ru"))</div></a></li>
		}
	}
</ul>

@helper GetIconClass(Slide slide)
{
	var isVisited = Model.VisitedSlideIds.Contains(slide.Id);
	var isComplete = !slide.ShouldBeSolved || Model.SolvedSlideIds.Contains(slide.Id);
	var progressClass = isComplete ? "navbar-label-success"
		: (isVisited ? "navbar-label-danger" : "navbar-label-default");
	var typeClass = slide is QuizSlide ? "glyphicon-pushpin"
		: slide is ExerciseSlide ? (isComplete ? "glyphicon-check" : "glyphicon-edit")
			: (isVisited ? "glyphicon-ok" : "glyphicon-none");
	@(progressClass + " glyphicon " + typeClass)
}

@helper GetTitle(Slide slide)
{
	@(slide is ExerciseSlide ? "Задача" : slide is QuizSlide ? "Тест" : "Теория")
}

@helper GetScore(Tuple<int, int> score)
{
	score = score ?? Tuple.Create(0, 0);
	@(score.Item2 == 0 ? "" : string.Format("{0}/{1}", score.Item1, score.Item2))
}