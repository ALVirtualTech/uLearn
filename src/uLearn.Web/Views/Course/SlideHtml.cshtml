@* Generator: MvcHelper GeneratePrettyNames: true DisableLinePragmas: true *@
@using uLearn
@using uLearn.Model.Blocks
@using uLearn.Quizes
@using uLearn.Web.Controllers
@* ReSharper disable once RedundantUsingDirective *@
@using uLearn.Web.Models
@using System.Linq

@helper Slide(BlockRenderContext context, int currentScore = 0)
{
	<div class="slide">
		<h1>
			@context.Slide.Title
			<span class="score">@Score(currentScore, context.Slide.MaxScore)</span>
		</h1>
		@foreach (var block in context.Slide.Blocks)
		{
			var questionBlock = block as AbstractQuestionBlock;
			if (questionBlock != null)
			{
				<h4><i class="glyphicon"></i> @questionBlock.QuestionIndex. @questionBlock.Text.RenderTex()</h4>
			}

			@Block((dynamic)block, context)

			if (questionBlock != null)
			{
				<hr class="quiz-block-delimiter"/>
			}
		}
	</div>
}

@helper Score(int currentScore, int maxScore)
{ @(maxScore == 0 ? "" : string.Format("{0}/{1}", currentScore, maxScore)) }

@helper Block(MdBlock block, BlockRenderContext context)
{ @MvcHtmlString.Create(block.Markdown.RenderMd(context.BaseUrl)) }

@helper Block(CodeBlock block, BlockRenderContext context)
{
	<textarea class="code code-sample" data-lang="@block.LangId" data-ver="@block.LangVer">@block.Code</textarea>
}

@helper Block(TexBlock block, BlockRenderContext context)
{
	foreach (var texLine in block.TexLines)
	{
		<div class="tex">\displaystyle @texLine.Trim()</div>
	}
}

@helper Block(YoutubeBlock block, BlockRenderContext context)
{
	<div class="video-container">
		<iframe class="embedded-video" width="864" height="480" src="https://www.youtube.com/embed/@block.VideoId" allowfullscreen></iframe>
	</div>
	<div>
		<a href="javascript://" class="popover-trigger"
		   title="Как ускорить видео?"
		   data-content="Если по иконке с шестеренкой нет возможности ускорить видео, то вам нужно &lt;a target='blank' href='http://youtube.com/html5'>вручную включить&lt;/a> использование HTML5-плеера.">
			Как ускорить видео?
		</a>
	</div>
}

@helper Block(ImageGaleryBlock block, BlockRenderContext context)
{
	<div class="flexslider">
		<ul class="slides">
			@foreach (var imageUrl in block.ImageUrls)
			{
				<li>
					<img src="@string.Format("{0}/{1}", context.BaseUrl, imageUrl)" alt="@imageUrl"/>
				</li>
			}
		</ul>
	</div>
}

@helper CodeTextArea(string initialCode, string langId, string runSolutionUrl)
{
	<textarea class="code code-exercise" data-lang="@langId">@initialCode</textarea>
	<div class="solution-control btn-group ctrl-group">
		<button type="button" class="run-solution-button btn btn-primary no-rounds" data-url="@runSolutionUrl">
			Run
		</button>
	</div>

	@RunErrors()
}

@helper Block(ExerciseBlock block, BlockRenderContext context)
{
	ExerciseBlockData data = context.GetBlockData(block) ?? new ExerciseBlockData();
	var action = data.CanSkip ? "$('#ShowSolutionsAlert').modal('show')" : string.Format("window.location='{0}'", data.AcceptedSolutionUrl);
	<textarea id="secretCodeExercise" class="hide">@block.ExerciseInitialCode.EnsureEnoughLines(4)</textarea>
	<textarea class="code code-exercise" data-lang="@block.LangId">@(data.LatestAcceptedSolution ?? block.ExerciseInitialCode.EnsureEnoughLines(4))</textarea>
	<script>
		function cleanUserCode() {
			var $secretCodeExercise = $('#secretCodeExercise');
			$('.code-exercise')[0].codeMirrorEditor.setValue($secretCodeExercise.text());
		}
	</script>
	if (data.ShowControls)
	{
		<div class="solution-control btn-group ctrl-group">
			<button type="button" class="run-solution-button btn btn-primary no-rounds @(data.IsLti ? "run-solution-button-lti" : "")" data-url="@data.RunSolutionUrl">
				Run
			</button>
			
			@if (!data.DebugView)
			{
				var e = ((ExerciseSlide)context.Slide).Exercise.HintsMd;
				<button id="GetHintButton" type="button" class="btn btn-default hints-btn"
						data-course-id="@context.Course.Id" data-slide-index="@context.Slide.Index" data-hints-count="@e.Count"
						data-url="@data.GetHintUrl">
					Get hint
				</button>
				if (!data.IsLti)
				{
					<button type="button" class="btn btn-default giveup-btn" onclick="@action">
						Show solutions
					</button>
				}
				<button type="button" class="btn btn-default reset-btn no-rounds" onclick=" cleanUserCode() ">
					Reset
				</button>
			}
		</div>

		@RunErrors()

		<div class="panel-group ctrl-group" id="hints-accordion">
			<div id="hints-place"></div>
		</div>
		if (!data.IsLti)
		{
			@Alert(data)
		}
	}
	if (data.DebugView)
	{
		<div>
			<h3>Подсказки</h3>
			<ol>
				@foreach (var hint in block.HintsMd)
				{
					<li>
						@MvcHtmlString.Create(hint.RenderMd(context.BaseUrl))
					</li>
				}
			</ol>
		</div>
	}
}

@helper Block(ChoiceBlock block, BlockRenderContext context)
{
	var items = block.ShuffledItems();
	var isMultiply = block.Multiple;
	var typeInp = isMultiply ? "checkbox" : "radio";
	QuizInfoModel model = context.GetBlockData(block) ?? new QuizInfoModel(new QuizModel(), block, 1, QuizState.NotPassed);
	<div class="quiz-block-mark @typeInp" id='@(block.Id + "_quizBlock")'>
		@for (int itemIndex = 0; itemIndex < items.Length; itemIndex++)
		{
			var item = items[itemIndex];
			var id = isMultiply ? itemIndex + "noMult" : model.BlockIndex.ToString();
			var itemChecked = model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].Contains(item.Id);
			var ans = itemChecked ? "checked" : "";
			var itemClass = "";
			var title = "";
			if (model.QuizState == QuizState.Total || model.QuizState == QuizState.Debug)
			{
				itemClass = item.IsCorrect ? "right-quiz" : itemChecked ? "wrong-quiz" : "";
				title = (item.IsCorrect ? "Правильный" : "Неправильный") + " вариант";
			}
			<div class="quiz">
				<label class="@itemClass" title="@title">
					<input @ans autocomplete="off" id='@(block.Id + "quizBlock" + item.Id)' name=@("group"+id) type="@typeInp">
					@item.Description.RenderTex()
				</label>
				@if (model.QuizState == QuizState.Debug && item.IsCorrect)
				{
					<i class="glyphicon glyphicon-ok" style="color: green"></i>
				}
				@if ((model.QuizState == QuizState.Debug || model.QuizState == QuizState.Total) && !String.IsNullOrEmpty(item.Explanation))
				{
					<p class="text-muted">@item.Explanation</p>
				}
			</div>
		}
	</div>
}

@helper Block(FillInBlock block, BlockRenderContext context)
{
	var value = "";
	var quizRes = "";
	QuizInfoModel model = context.GetBlockData(block) ?? new QuizInfoModel(new QuizModel(), block, 1, QuizState.NotPassed);
	if (model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() != null)
	{
		value = model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault();
		quizRes = (model.QuizState == QuizState.Total || model.QuizState == QuizState.Debug) 
			? (model.QuizModel.AnswersToQuizes[block.Id][1] == "False" ? "wrong-quiz" : "right-quiz") : "";
	}
	var sample = block.Sample;
	<div class="quiz quiz-block-input">
		<label>
			<input autocomplete="off" class="form-control @quizRes" value="@value" id='@(block.Id + "quizBlock")' maxlength="@QuizController.MAX_FILLINBLOCK_SIZE">
		</label>
	</div>
	if (model.QuizState == QuizState.Total || model.QuizState == QuizState.Debug)
	{
		<div>Правильный ответ: @sample</div>
		if (!String.IsNullOrEmpty(block.Explanation))
		{
			<div class="text-muted">@block.Explanation</div>
		}
	}
}

@helper Block(IsTrueBlock block, BlockRenderContext context)
{
	var tchecked = "";
	var fchecked = "";
	var trueItemClass = "";
	var falseItemClass = "";
	var ttitle = "";
	var ftitle = "";
	QuizInfoModel model = context.GetBlockData(block) ?? new QuizInfoModel(new QuizModel(), block, 1, QuizState.NotPassed);
	if (model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() != null)
	{
		var userAnswer = model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() == "True";
		tchecked = userAnswer ? "checked" : "";
		fchecked = userAnswer ? "" : "checked";
		if (model.QuizState == QuizState.Total || model.QuizState == QuizState.Debug)
		{
			trueItemClass = block.Answer ? "right-quiz" : userAnswer ? "wrong-quiz" : "";
			falseItemClass = !block.Answer ? "right-quiz" : !userAnswer ? "wrong-quiz" : "";
		}
	}
	if (model.QuizState == QuizState.Total || model.QuizState == QuizState.Debug)
	{
		ttitle = (block.Answer ? "Правильный" : "Неправильный") + " вариант";
		ftitle = (!block.Answer ? "Правильный" : "Неправильный") + " вариант";
	}
	<div class="radio quiz-block-mark" id="@(block.Id + "_quizBlock")">
		<div class="quiz">
			<label class="@trueItemClass" title="@ttitle"><input autocomplete="off" @tchecked id='@(block.Id + "quizBlock" + "True")' name='@(block.Id+"group")' type="radio">Верно</label>
			@if (model.QuizState == QuizState.Debug && block.Answer)
			{
				<i class="glyphicon glyphicon-ok" style="color: green"></i>
			}
		</div>
		<div class="quiz">
			<label class="@falseItemClass" title="@ftitle"><input autocomplete="off" @fchecked id='@(block.Id + "quizBlock" + "False")' name='@(block.Id+"group")' type="radio">Неверно</label>
			@if (model.QuizState == QuizState.Debug && !block.Answer)
			{
				<i class="glyphicon glyphicon-ok" style="color: green"></i>
			}
		</div>
	</div>
	if ((model.QuizState == QuizState.Debug || model.QuizState == QuizState.Total) && !String.IsNullOrEmpty(block.Explanation))
	{
		<div class="text-muted">@block.Explanation</div>
	}
}

@helper RunErrors()
{
	<div class="run-result run-service-error">
		<div class="run-verdict label-warning">Ошибка сервера :(</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>

	<div class="run-result run-compile-error">
		<div class="run-verdict label-danger">Ошибка компиляции</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>

	<div class="run-result run-style-error">
		<div class="run-verdict label-danger">Нарушение стилевых требований</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
		<div>
			<small>В некоторых ситуациях стилевые проверки тут могут быть жестче, чем необходимо в реальной жизни.</small>
		</div>
	</div>

	<div class="run-result run-wa">
		<div class="run-verdict label-danger">Неверный результат</div>
		<div class="diff-table tablesorter"></div>
	</div>

	<div class="run-result run-wa-no-diff">
		<div class="run-verdict label-danger">Неверный результат</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>

	<div class="run-result run-success">
		<div class="run-verdict label-success clearfix">Успех!</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>
}

@helper Alert(ExerciseBlockData data)
{
	<div class="modal fade" id="ShowSolutionsAlert" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span></button>
					<h4 class="modal-title">Внимание</h4>
				</div>
				<div class="modal-body">
					<p>Вы потеряете возможность получить баллы за эту задачу, если продолжите.</p>
				</div>
				<div class="modal-footer">
					<a class="btn btn-default" href="@data.AcceptedSolutionUrl">Продолжить</a>
					<button type="button" class="btn btn-primary" data-dismiss="modal">Отмена</button>
				</div>
			</div>
		</div>
	</div>
}