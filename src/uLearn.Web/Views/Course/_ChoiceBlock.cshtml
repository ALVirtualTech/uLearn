@using uLearn
@using uLearn.Quizes
@model QuizInfoModel
@{
	var quizBlock = (ChoiceBlock)Model.CurrentBlock;
	var isMultiply = quizBlock.Multiple;
	var typeInp = isMultiply ? "checkbox" : "radio";

	<div class="quiz-block-mark @typeInp" id='@(quizBlock.Id + "_quizBlock")'>
		@for (int itemIndex = 0; itemIndex < quizBlock.Items.Length; itemIndex++)
		{
			var ident = isMultiply ? itemIndex + "noMult" : Model.BlockIndex.ToString();
			var item = quizBlock.Items[itemIndex];
			var itemChecked = Model.QuizState != QuizState.NotPassed && Model.CourseModel.AnswersToQuizes[quizBlock.Id].Contains(item.Id);
			var ans = itemChecked ? "checked" : "";
			var itemClass = "";
			var title = "";
			if (Model.QuizState == QuizState.Total)
			{
				itemClass = item.IsCorrect ? "right-quiz" : itemChecked ? "wrong-quiz" : "";
				title = (item.IsCorrect ? "Правильный" : "Неправильный") + " вариант";
			}
			<div class="quiz">
				<label class="@itemClass" title="@title">
					<input @ans autocomplete="off" id='@(quizBlock.Id + "quizBlock" + item.Id)' name=@("group"+ident) type="@typeInp">
					@item.Description.RenderTex()
				</label>
				@if (Model.QuizState == QuizState.Total && !String.IsNullOrEmpty(item.Explanation))
				{
					<p class="text-muted">@item.Explanation</p>
				}
			</div>
		}
	</div>
}
